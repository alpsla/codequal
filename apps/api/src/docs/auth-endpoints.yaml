openapi: 3.0.0
info:
  title: CodeQual Auth API
  version: 1.0.0
  description: Authentication endpoints for CodeQual API

paths:
  /auth/signup:
    post:
      summary: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  description: User's password (minimum 6 characters)
                  example: SecurePassword123!
                fullName:
                  type: string
                  description: User's full name (optional)
                  example: John Doe
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully. Please check your email to verify your account.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      email:
                        type: string
                        format: email
                      created_at:
                        type: string
                        format: date-time
        '400':
          description: Bad request - validation error or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User already registered
        '429':
          description: Too many requests - rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Too many authentication attempts, please try again later.

  /auth/signin:
    post:
      summary: Sign in with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: SecurePassword123!
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                  refresh_token:
                    type: string
                    description: Refresh token for obtaining new access tokens
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      email:
                        type: string
                        format: email
                      full_name:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '429':
          description: Too many requests - rate limit exceeded

  /auth/signout:
    post:
      summary: Sign out the current user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Signed out successfully
        '401':
          description: Not authenticated

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: The refresh token obtained during signin
      responses:
        '200':
          description: New tokens generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
                  refresh_token:
                    type: string
                    description: New refresh token
        '401':
          description: Invalid or expired refresh token

  /auth/magic-link:
    post:
      summary: Request a magic link for passwordless authentication
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Email address to send the magic link to
                  example: user@example.com
                redirectTo:
                  type: string
                  format: uri
                  description: URL to redirect to after authentication
                  example: https://app.codequal.com/dashboard
      responses:
        '200':
          description: Magic link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Magic link sent to your email
        '400':
          description: Invalid email
        '429':
          description: Too many requests

  /auth/oauth/{provider}:
    get:
      summary: Initiate OAuth authentication
      tags:
        - Authentication
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum: [github, google]
          description: OAuth provider
      responses:
        '302':
          description: Redirect to OAuth provider
        '400':
          description: Invalid provider

  /auth/oauth/callback:
    post:
      summary: Handle OAuth callback
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  description: Authorization code from OAuth provider
                state:
                  type: string
                  description: State parameter for CSRF protection
      responses:
        '200':
          description: OAuth authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  session:
                    type: object
                    properties:
                      access_token:
                        type: string
                      refresh_token:
                        type: string
                  redirect:
                    type: string
                    description: URL to redirect to
        '400':
          description: Invalid code or state

  /auth/status:
    get:
      summary: Get current authentication status
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      email:
                        type: string
                        format: email
                      full_name:
                        type: string
        '401':
          description: Not authenticated

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from signin endpoint

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code for programmatic handling
        details:
          type: object
          description: Additional error details

tags:
  - name: Authentication
    description: User authentication and authorization endpoints