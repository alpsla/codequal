#!/usr/bin/env ts-node

/**
 * Setup Test Authentication for E2E Testing
 * This script generates and validates test authentication tokens
 */

import { config } from 'dotenv';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';
import { createLogger } from '@codequal/core/utils';
import axios from 'axios';
import { promises as fs } from 'fs';

// Load environment variables
config({ path: resolve(__dirname, '../../.env') });

const logger = createLogger('TestAuthSetup');

interface TestAuthConfig {
  apiKey: string;
  supabaseToken?: string;
  testUserId: string;
  testOrgId: string;
  testEmail: string;
}

/**
 * Generate test authentication configuration
 */
async function setupTestAuth(): Promise<TestAuthConfig> {
  console.log('üîê Setting up Test Authentication\n');
  
  // 1. Check if we're in test/development mode
  const nodeEnv = process.env.NODE_ENV || 'development';
  console.log(`Environment: ${nodeEnv}`);
  
  if (nodeEnv === 'production') {
    console.error('‚ùå Cannot use test authentication in production!');
    process.exit(1);
  }
  
  // 2. Test API Key (works with api-key-auth middleware)
  const testApiKey = 'test_key';
  console.log(`\n‚úÖ Test API Key: ${testApiKey}`);
  console.log('   This key is recognized by the API in development mode');
  
  // 3. Test User Configuration
  const testConfig: TestAuthConfig = {
    apiKey: testApiKey,
    testUserId: '00000000-0000-0000-0000-000000000000',
    testOrgId: 'test_org',
    testEmail: 'test@codequal.dev'
  };
  
  // 4. Generate Supabase Test Token (if needed)
  if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {
    try {
      const supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_SERVICE_ROLE_KEY
      );
      
      // Check if test user exists
      const { data: existingUser, error: checkError } = await supabase
        .from('users')
        .select('id')
        .eq('email', testConfig.testEmail)
        .single();
      
      if (checkError || !existingUser) {
        console.log('\nüìù Creating test user in Supabase...');
        
        // Create test user
        const { data: newUser, error: createError } = await supabase
          .from('users')
          .insert({
            id: testConfig.testUserId,
            email: testConfig.testEmail,
            name: 'Test User',
            avatar_url: null,
            created_at: new Date().toISOString()
          })
          .select()
          .single();
        
        if (createError) {
          console.log('   ‚ö†Ô∏è Could not create test user:', createError.message);
        } else {
          console.log('   ‚úÖ Test user created');
        }
      } else {
        console.log('\n‚úÖ Test user already exists');
      }
      
      // For E2E testing, we'll use the API key authentication
      // Supabase JWT tokens would require proper signing
      console.log('\n‚úÖ Test user configured for API key authentication');
      
    } catch (error) {
      console.log('\n‚ö†Ô∏è Could not set up Supabase test user:', error);
    }
  }
  
  // 5. Write test configuration
  console.log('\nüìÑ Test Authentication Configuration:');
  console.log('=====================================');
  console.log(`API_KEY=${testConfig.apiKey}`);
  console.log(`TEST_USER_ID=${testConfig.testUserId}`);
  console.log(`TEST_USER_EMAIL=${testConfig.testEmail}`);
  console.log(`TEST_ORG_ID=${testConfig.testOrgId}`);
  if (testConfig.supabaseToken) {
    console.log(`TEST_JWT_TOKEN=${testConfig.supabaseToken.substring(0, 20)}...`);
  }
  console.log('=====================================');
  
  // 6. Test the authentication
  console.log('\nüß™ Testing authentication setup...');
  
  try {
    const apiUrl = process.env.API_URL || 'http://localhost:3001';
    
    // Test with API key
    const response = await axios.get(`${apiUrl}/health`, {
      headers: {
        'X-API-Key': testConfig.apiKey
      }
    });
    
    console.log('‚úÖ API Key authentication works!');
    console.log(`   Response: ${response.status} ${response.statusText}`);
    
  } catch (error: any) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è API server is not running. Start it with: npm run dev:api');
    } else {
      console.log('‚ùå Authentication test failed:', error.message);
    }
  }
  
  return testConfig;
}

/**
 * Save test configuration to environment file
 */
async function saveTestConfig(config: TestAuthConfig) {
  const envPath = resolve(__dirname, '../../.env.test');
  
  const envContent = `# Test Authentication Configuration
# Generated by setup-test-auth.ts
# DO NOT COMMIT THIS FILE

# Test API Key (works in development mode)
TEST_API_KEY=${config.apiKey}

# Test User Configuration
TEST_USER_ID=${config.testUserId}
TEST_USER_EMAIL=${config.testEmail}
TEST_ORG_ID=${config.testOrgId}

# Test JWT Token (if using Supabase auth)
${config.supabaseToken ? `TEST_JWT_TOKEN=${config.supabaseToken}` : '# TEST_JWT_TOKEN=not_configured'}

# API URL for testing
API_URL=${process.env.API_URL || 'http://localhost:3001'}
`;
  
  await fs.writeFile(envPath, envContent);
  console.log(`\n‚úÖ Test configuration saved to: ${envPath}`);
  console.log('   Use this file for E2E testing: npm run test:e2e');
}

// Run the setup
async function main() {
  try {
    const config = await setupTestAuth();
    await saveTestConfig(config);
    
    console.log('\n‚úÖ Test authentication setup complete!');
    console.log('\nNext steps:');
    console.log('1. Start the API server: npm run dev:api');
    console.log('2. Run E2E tests: npm run test:e2e');
    
  } catch (error) {
    console.error('\n‚ùå Setup failed:', error);
    process.exit(1);
  }
}

main();