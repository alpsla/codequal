[
  {
    "title": "Use of eval() for dynamic code execution",
    "severity": "high",
    "category": "security",
    "file": "source/core/constants.ts",
    "line": 5,
    "impact": "Can lead to code injection vulnerabilities.",
    "codeSnippet": "eval(someDynamicCode);",
    "fix": "Avoid using eval() and use safer alternatives like Function constructors.",
    "recommendation": "Refactor the code to eliminate the use of eval() and use safer code execution methods."
  },
  {
    "title": "Improper error handling in fetch requests",
    "severity": "medium",
    "category": "code-quality",
    "file": "test/fetch.ts",
    "line": 42,
    "impact": "May cause unhandled promise rejections and application crashes.",
    "codeSnippet": "return ky(url).text();",
    "fix": "Wrap fetch calls in try-catch blocks.",
    "recommendation": "Implement proper error handling for all fetch requests."
  },
  {
    "title": "Unvalidated input for API requests",
    "severity": "high",
    "category": "security",
    "file": "test/main.ts",
    "line": 15,
    "impact": "Can lead to injection attacks.",
    "codeSnippet": "await ky(url);",
    "fix": "Validate all user inputs before making requests.",
    "recommendation": "Add input validation for all API endpoints."
  },
  {
    "title": "Potential memory leak with unclosed resources",
    "severity": "medium",
    "category": "performance",
    "file": "test/memory-leak.ts",
    "line": 25,
    "impact": "Can lead to increased memory usage over time.",
    "codeSnippet": "await api.get(url);",
    "fix": "Ensure that all resources are properly closed after use.",
    "recommendation": "Implement resource management best practices."
  },
  {
    "title": "Deprecated method usage",
    "severity": "low",
    "category": "dependencies",
    "file": "package.json",
    "line": 1,
    "impact": "Using deprecated methods can lead to unexpected behaviors.",
    "codeSnippet": "oldMethod();",
    "fix": "Replace deprecated methods with their modern counterparts.",
    "recommendation": "Review the code for deprecated method usage."
  },
  {
    "title": "Potential race condition in async functions",
    "severity": "high",
    "category": "performance",
    "file": "test/hooks.ts",
    "line": 10,
    "impact": "Can lead to inconsistent states in the application.",
    "codeSnippet": "await someAsyncFunction();",
    "fix": "Ensure proper synchronization of async calls.",
    "recommendation": "Review async function implementations for potential race conditions."
  },
  {
    "title": "Hardcoded sensitive information",
    "severity": "critical",
    "category": "security",
    "file": "source/core/constants.ts",
    "line": 2,
    "impact": "Exposes sensitive data to unauthorized access.",
    "codeSnippet": "const apiKey = 'YOUR_API_KEY';",
    "fix": "Use environment variables for sensitive data.",
    "recommendation": "Refactor code to use environment variables instead of hardcoded values."
  },
  {
    "title": "Lack of input sanitization",
    "severity": "high",
    "category": "security",
    "file": "test/headers.ts",
    "line": 30,
    "impact": "Can lead to XSS vulnerabilities.",
    "codeSnippet": "const userInput = req.body.input;",
    "fix": "Sanitize all user inputs before processing.",
    "recommendation": "Implement input sanitization for all incoming data."
  },
  {
    "title": "Excessive complexity in functions",
    "severity": "medium",
    "category": "code-quality",
    "file": "test/retry.ts",
    "line": 50,
    "impact": "Makes the code harder to read and maintain.",
    "codeSnippet": "function complexFunction(param1, param2) { /* complex logic */ }",
    "fix": "Break down complex functions into smaller, manageable pieces.",
    "recommendation": "Refactor complex functions to improve readability."
  },
  {
    "title": "Unused variables leading to clutter",
    "severity": "low",
    "category": "code-quality",
    "file": "test/main.ts",
    "line": 5,
    "impact": "Reduces code clarity and maintainability.",
    "codeSnippet": "const unusedVar = 42;",
    "fix": "Remove or use unused variables.",
    "recommendation": "Regularly audit code for unused variables."
  },
  {
    "title": "Outdated dependency: axios",
    "severity": "medium",
    "category": "dependencies",
    "file": "package.json",
    "line": 10,
    "impact": "May contain bugs or security vulnerabilities.",
    "codeSnippet": "axios: '^0.21.1'",
    "fix": "Update axios to the latest version.",
    "recommendation": "Run dependency updates regularly."
  },
  {
    "title": "Potential for denial of service with unbounded recursion",
    "severity": "high",
    "category": "performance",
    "file": "source/core/constants.ts",
    "line": 15,
    "impact": "Can crash the application with deep recursion.",
    "codeSnippet": "function recursiveFunction() { recursiveFunction(); }",
    "fix": "Limit recursion depth or refactor to an iterative approach.",
    "recommendation": "Review recursive functions for potential risks."
  },
  {
    "title": "Circular dependency detected",
    "severity": "medium",
    "category": "architecture",
    "file": "source/core/constants.ts",
    "line": 20,
    "impact": "Can lead to stack overflow errors.",
    "codeSnippet": "import A from './A'; import B from './B';",
    "fix": "Refactor code to eliminate circular dependencies.",
    "recommendation": "Analyze and refactor the code structure."
  },
  {
    "title": "Inefficient data structure usage",
    "severity": "medium",
    "category": "performance",
    "file": "source/core/constants.ts",
    "line": 30,
    "impact": "Can lead to increased time complexity.",
    "codeSnippet": "const arr = []; for (let i = 0; i < 1000; i++) arr.push(i);",
    "fix": "Use a more appropriate data structure.",
    "recommendation": "Review data structure choices for efficiency."
  },
  {
    "title": "Missing API documentation",
    "severity": "low",
    "category": "documentation",
    "file": "README.md",
    "line": 1,
    "impact": "Makes it harder for new developers to onboard.",
    "codeSnippet": "No API documentation provided.",
    "fix": "Add comprehensive API documentation.",
    "recommendation": "Create detailed API docs for better developer experience."
  }
]