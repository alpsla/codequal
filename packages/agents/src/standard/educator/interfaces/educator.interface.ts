import { DeveloperSkills, TeamSkills } from '../../orchestrator/interfaces/skill-provider.interface';
// Import core types from analysis-types to match orchestrator expectations
import { 
  Course, 
  Article, 
  Video, 
  EducationalEnhancements,
  LearningPath
} from '../../types/analysis-types';
// Import educator-specific types from local types
import { 
  CourseRecommendation, 
  EducationalContent,
  TeamLearningInsights
} from './types';

/**
 * Educational suggestions from the comparison agent's report
 */
export interface EducationalSuggestion {
  topic: string;
  reason: string;
  priority: 'immediate' | 'short-term' | 'long-term';
  category: 'security' | 'performance' | 'code-quality' | 'architecture' | 'dependencies';
  level: 'beginner' | 'intermediate' | 'advanced';
}

/**
 * Parameters for course search
 */
export interface CourseSearchParams {
  suggestions: EducationalSuggestion[];
  developerLevel: string;
  teamProfile?: TeamSkills;
  maxResults?: number;
  preferredProviders?: string[];
  budgetConstraint?: 'free' | 'paid' | 'any';
  repository?: string;
  prNumber?: string;
}

/**
 * Search query for finding courses
 */
export interface SearchQuery {
  query: string;
  filters?: {
    level?: string;
    duration?: string;
    provider?: string;
    maxPrice?: number;
    minRating?: number;
  };
}

/**
 * Educator Agent Interface
 * 
 * Responsible for finding real educational resources based on
 * the suggestions generated by the comparison agent
 */
export interface IEducatorAgent {
  /**
   * Research educational content based on issues
   * This is the main entry point for the orchestrator
   */
  research?(params: {
    issues: any[];
    developerLevel?: string;
    teamProfile?: TeamSkills;
  }): Promise<any>;
  
  /**
   * Find matching courses based on educational suggestions
   */
  findMatchingCourses(params: CourseSearchParams): Promise<EducationalEnhancements>;
  
  /**
   * Search for specific courses
   */
  searchCourses(query: SearchQuery): Promise<Course[]>;
  
  /**
   * Search for technical articles
   */
  searchArticles(query: SearchQuery): Promise<Article[]>;
  
  /**
   * Search for educational videos
   */
  searchVideos(query: SearchQuery): Promise<Video[]>;
  
  /**
   * Create a personalized learning path
   */
  createLearningPath(
    resources: (Course | Article | Video)[],
    developerProfile: DeveloperSkills
  ): Promise<LearningPath>;
  
  /**
   * Extract educational suggestions from report
   */
  extractSuggestionsFromReport(markdownReport: string): EducationalSuggestion[];
}