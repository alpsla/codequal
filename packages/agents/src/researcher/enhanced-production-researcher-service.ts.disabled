/**
 * Enhanced Production Researcher Service
 * 
 * Generates all 800 model configurations:
 * - 10 roles × 10 languages × 4 repository sizes × 2 models (primary + fallback)
 */

import { AuthenticatedUser, ModelVersionInfo } from '@codequal/core';
import { VectorStorageService } from '@codequal/database';
import { ModelVersionSync } from '@codequal/core';
import { createLogger } from '@codequal/core/utils';
import { DynamicModelEvaluator } from '../model-selection/dynamic-model-evaluator';
import { AIModelSelector } from '../model-selection/ai-model-selector';
import { ProductionResearcherService } from './production-researcher-service';

const logger = createLogger('EnhancedProductionResearcherService');

// Define supported languages
const SUPPORTED_LANGUAGES = [
  'javascript',
  'typescript', 
  'python',
  'java',
  'rust',
  'go',
  'csharp',
  'ruby',
  'php',
  'swift'
] as const;

// Define repository sizes
const REPOSITORY_SIZES = [
  'small',    // < 1MB or < 50 files
  'medium',   // 1MB - 50MB
  'large',    // > 50MB or > 500 files
  'extra_large' // > 500MB or > 5000 files
] as const;

// Define all roles
const AGENT_ROLES = [
  'deepwiki',
  'researcher',
  'security',
  'architecture', 
  'performance',
  'code_quality',
  'dependencies',
  'documentation',
  'testing',
  'translator'
] as const;

// Language-specific scoring adjustments
const LANGUAGE_SCORING_ADJUSTMENTS: Record<string, Partial<Record<string, number>>> = {
  python: {
    quality: 1.1,  // Python models often have better quality
    cost: 0.9      // More efficient tokenization
  },
  javascript: {
    speed: 1.1,    // JS/TS models are often faster
    quality: 1.0
  },
  typescript: {
    speed: 1.1,
    quality: 1.0
  },
  java: {
    quality: 0.95, // Java models may need more context
    cost: 1.1      // Verbose language
  },
  rust: {
    quality: 1.05, // Rust requires precision
    cost: 1.0
  },
  go: {
    speed: 1.15,   // Go is concise
    cost: 0.85
  },
  csharp: {
    quality: 0.95,
    cost: 1.05
  },
  ruby: {
    quality: 1.0,
    cost: 0.95
  },
  php: {
    quality: 0.9,
    cost: 1.0
  },
  swift: {
    quality: 1.0,
    cost: 1.0
  }
};

// Repository size scoring adjustments
const SIZE_SCORING_ADJUSTMENTS: Record<string, Partial<Record<string, number>>> = {
  small: {
    speed: 1.2,    // Speed matters more for small repos
    cost: 0.8,     // Cost less important
    quality: 0.95  // Can use slightly lower quality
  },
  medium: {
    speed: 1.0,
    cost: 1.0,
    quality: 1.0
  },
  large: {
    speed: 0.9,    // Speed less critical
    cost: 1.2,     // Cost more important
    quality: 1.1   // Need better quality for complex repos
  },
  extra_large: {
    speed: 0.8,    // Speed least important
    cost: 1.3,     // Cost very important
    quality: 1.15  // Need highest quality
  }
};

export interface EnhancedModelConfiguration {
  role: string;
  language: string;
  repositorySize: string;
  primary: ModelVersionInfo;
  fallback: ModelVersionInfo;
  reasoning: string[];
  contextSpecificAdjustments: {
    languageFactors: Record<string, number>;
    sizeFactors: Record<string, number>;
    combinedFactors: Record<string, number>;
  };
  lastUpdated: Date;
  updateFrequency: 'quarterly';
}

export class EnhancedProductionResearcherService extends ProductionResearcherService {
  
  /**
   * Perform comprehensive research with all 800 configurations
   */
  async performComprehensiveResearch(
    user: AuthenticatedUser,
    trigger: 'scheduled' | 'manual' = 'manual'
  ): Promise<any> {
    const operationId = `research_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`;
    const isSystemUser = 'isSystemUser' in user && user.isSystemUser === true;
    
    logger.info('Starting ENHANCED comprehensive model research', {
      operationId,
      trigger,
      userId: user.id,
      isSystemUser,
      userEmail: isSystemUser ? 'system' : user.email,
      expectedConfigurations: AGENT_ROLES.length * SUPPORTED_LANGUAGES.length * REPOSITORY_SIZES.length
    });

    try {
      // Step 1: Fetch and evaluate models (same as parent)
      const models = await this.fetchLatestModels();
      logger.info(`Fetched ${models.length} models from OpenRouter`);

      const modelMetrics = models
        .filter(m => {
          const id = m.id.toLowerCase();
          return !id.includes('embed') && 
                 !id.includes('vision') && 
                 m.pricing &&
                 (parseFloat(m.pricing.prompt) > 0 || parseFloat(m.pricing.completion) > 0);
        })
        .map(m => {
          const [provider, ...modelParts] = m.id.split('/');
          return {
            provider,
            model: modelParts.join('/'),
            pricing: {
              input: parseFloat(m.pricing.prompt) / 1000000,
              output: parseFloat(m.pricing.completion) / 1000000
            },
            context_length: m.context_length,
            architecture: m.architecture,
            top_provider: m.top_provider,
            per_request_limits: m.per_request_limits
          };
        });
      
      const evaluatedModels = this.dynamicEvaluator.evaluateModels(modelMetrics);
      logger.info(`Evaluated ${evaluatedModels.length} models with dynamic scoring`);

      // Step 2: Generate configurations for ALL combinations
      const configurations: EnhancedModelConfiguration[] = [];
      let processedCount = 0;
      const totalCombinations = AGENT_ROLES.length * SUPPORTED_LANGUAGES.length * REPOSITORY_SIZES.length;

      for (const role of AGENT_ROLES) {
        for (const language of SUPPORTED_LANGUAGES) {
          for (const size of REPOSITORY_SIZES) {
            try {
              processedCount++;
              if (processedCount % 50 === 0) {
                logger.info(`Progress: ${processedCount}/${totalCombinations} configurations processed`);
              }

              // Get base weights for role
              const baseWeights = this.getRoleWeights(role);
              
              // Apply language and size adjustments
              const adjustedWeights = this.applyContextAdjustments(
                baseWeights,
                language,
                size
              );

              // Calculate composite scores with adjusted weights
              evaluatedModels.forEach(model => {
                this.dynamicEvaluator.calculateCompositeScore(model, adjustedWeights);
              });

              // Sort by composite score
              const sortedModels = [...evaluatedModels].sort((a, b) => 
                (b.compositeScore || 0) - (a.compositeScore || 0)
              );

              // Use AI to select from top candidates
              const topCandidates = sortedModels.slice(0, 10);
              const context = {
                role,
                language,
                repositorySize: size,
                requirements: this.getContextRequirements(role, language, size)
              };

              const aiSelection = await this.aiSelector.selectModels(topCandidates, context);
              
              const primaryInfo = this.convertToModelVersionInfo(aiSelection.primary, models);
              const fallbackInfo = this.convertToModelVersionInfo(aiSelection.fallback, models);
              
              const config: EnhancedModelConfiguration = {
                role,
                language,
                repositorySize: size,
                primary: primaryInfo,
                fallback: fallbackInfo,
                reasoning: [
                  aiSelection.primary.reasoning,
                  aiSelection.fallback.reasoning,
                  `Context: ${language} ${size} repository for ${role} agent`,
                  aiSelection.analysis
                ],
                contextSpecificAdjustments: {
                  languageFactors: LANGUAGE_SCORING_ADJUSTMENTS[language] || {},
                  sizeFactors: SIZE_SCORING_ADJUSTMENTS[size] || {},
                  combinedFactors: adjustedWeights
                },
                lastUpdated: new Date(),
                updateFrequency: 'quarterly'
              };

              configurations.push(config);
              
              // Store in Vector DB with context-specific key
              await this.storeEnhancedConfiguration(config, user);
              
            } catch (error) {
              logger.error(`Failed to select models for ${role}/${language}/${size}`, { error });
            }
          }
        }
      }

      // Step 3: Store operation metadata
      const result = {
        operationId,
        timestamp: new Date(),
        configurationsUpdated: configurations.length,
        modelsEvaluated: models.length,
        selectedConfigurations: configurations,
        nextScheduledUpdate: this.calculateNextQuarterlyUpdate(),
        breakdown: {
          roles: AGENT_ROLES.length,
          languages: SUPPORTED_LANGUAGES.length,
          sizes: REPOSITORY_SIZES.length,
          total: configurations.length
        }
      };

      await this.storeOperationResult(result, user);

      logger.info('ENHANCED research completed successfully', {
        operationId,
        configurationsUpdated: result.configurationsUpdated,
        expectedConfigurations: totalCombinations,
        completionRate: `${(configurations.length / totalCombinations * 100).toFixed(1)}%`,
        nextUpdate: result.nextScheduledUpdate,
        trigger,
        isSystemUser
      });

      // Log configuration summary
      this.logConfigurationSummary(configurations);

      return result;

    } catch (error) {
      logger.error('Enhanced research failed', { error, operationId });
      throw error;
    }
  }

  /**
   * Apply context-specific adjustments to base weights
   */
  private applyContextAdjustments(
    baseWeights: Record<string, number>,
    language: string,
    size: string
  ): Record<string, number> {
    const langAdjustments = LANGUAGE_SCORING_ADJUSTMENTS[language] || {};
    const sizeAdjustments = SIZE_SCORING_ADJUSTMENTS[size] || {};
    
    const adjusted: Record<string, number> = {};
    
    for (const [key, baseValue] of Object.entries(baseWeights)) {
      const langFactor = langAdjustments[key] || 1.0;
      const sizeFactor = sizeAdjustments[key] || 1.0;
      adjusted[key] = baseValue * langFactor * sizeFactor;
    }
    
    // Normalize weights to sum to 1.0
    const sum = Object.values(adjusted).reduce((a, b) => a + b, 0);
    for (const key in adjusted) {
      adjusted[key] = adjusted[key] / sum;
    }
    
    return adjusted;
  }

  /**
   * Get context-specific requirements
   */
  private getContextRequirements(role: string, language: string, size: string): string {
    const requirements: string[] = [];
    
    // Role-specific requirements
    if (role === 'security') {
      requirements.push('High accuracy for vulnerability detection');
    } else if (role === 'performance') {
      requirements.push('Fast response times for performance analysis');
    } else if (role === 'documentation') {
      requirements.push('Strong natural language generation');
    }
    
    // Language-specific requirements
    if (language === 'python') {
      requirements.push('Strong Python idiom understanding');
    } else if (language === 'rust') {
      requirements.push('Memory safety and ownership comprehension');
    } else if (language === 'javascript' || language === 'typescript') {
      requirements.push('Async/await and modern JS features');
    }
    
    // Size-specific requirements
    if (size === 'small') {
      requirements.push('Quick analysis for small codebases');
    } else if (size === 'extra_large') {
      requirements.push('Efficient handling of large contexts');
    }
    
    return requirements.join(', ');
  }

  /**
   * Store enhanced configuration with context
   */
  private async storeEnhancedConfiguration(
    config: EnhancedModelConfiguration,
    user: AuthenticatedUser
  ): Promise<void> {
    const configurationKey = `${config.role}_${config.language}_${config.repositorySize}`;
    
    try {
      const chunk = {
        content: JSON.stringify({
          ...config,
          configurationKey
        }),
        metadata: {
          type: 'model_configuration',
          role: config.role,
          language: config.language,
          repositorySize: config.repositorySize,
          configurationKey,
          primaryModel: `${config.primary.provider}/${config.primary.model}`,
          fallbackModel: `${config.fallback.provider}/${config.fallback.model}`,
          lastUpdated: config.lastUpdated.toISOString()
        },
        embedding: [] // Will be generated by vector service
      };

      await this.vectorStorage.storeChunk(
        '00000000-0000-0000-0000-000000000001', // Special researcher repo ID
        chunk,
        user
      );
    } catch (error) {
      logger.warn(`Failed to store enhanced configuration for ${configurationKey}`, { error });
    }
  }

  /**
   * Log configuration summary
   */
  private logConfigurationSummary(configurations: EnhancedModelConfiguration[]): void {
    logger.info('=== ENHANCED CONFIGURATION SUMMARY ===');
    
    // Group by primary model
    const modelUsage = new Map<string, number>();
    configurations.forEach(config => {
      const modelKey = `${config.primary.provider}/${config.primary.model}`;
      modelUsage.set(modelKey, (modelUsage.get(modelKey) || 0) + 1);
    });
    
    // Sort by usage
    const sortedModels = Array.from(modelUsage.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);
    
    logger.info('Top 10 most selected models:');
    sortedModels.forEach(([model, count], index) => {
      const percentage = (count / configurations.length * 100).toFixed(1);
      logger.info(`  ${index + 1}. ${model}: ${count} configurations (${percentage}%)`);
    });
    
    // Log role distribution
    const roleStats = new Map<string, Set<string>>();
    configurations.forEach(config => {
      if (!roleStats.has(config.role)) {
        roleStats.set(config.role, new Set());
      }
      roleStats.get(config.role)!.add(`${config.primary.provider}/${config.primary.model}`);
    });
    
    logger.info('\nUnique models per role:');
    AGENT_ROLES.forEach(role => {
      const uniqueModels = roleStats.get(role)?.size || 0;
      logger.info(`  ${role}: ${uniqueModels} unique models`);
    });
    
    logger.info(`\nTotal configurations generated: ${configurations.length}`);
  }

  /**
   * Get role weights (helper method)
   */
  private getRoleWeights(role: string): Record<string, number> {
    // Define role-specific weights
    const roleWeights: Record<string, Record<string, number>> = {
      deepwiki: { quality: 0.50, cost: 0.30, speed: 0.20 },
      researcher: { quality: 0.50, cost: 0.35, speed: 0.15 },
      security: { quality: 0.60, cost: 0.20, speed: 0.20 },
      architecture: { quality: 0.55, cost: 0.25, speed: 0.20 },
      performance: { quality: 0.35, cost: 0.25, speed: 0.40 },
      code_quality: { quality: 0.50, cost: 0.30, speed: 0.20 },
      dependencies: { quality: 0.30, cost: 0.40, speed: 0.30 },
      documentation: { quality: 0.45, cost: 0.35, speed: 0.20 },
      testing: { quality: 0.40, cost: 0.30, speed: 0.30 },
      translator: { quality: 0.55, cost: 0.30, speed: 0.15 }
    };
    
    return roleWeights[role] || { quality: 0.40, cost: 0.30, speed: 0.30 };
  }
}