{
  "repositoryUrl": "https://github.com/sindresorhus/ky",
  "prNumber": 700,
  "mainBranchIssues": [
    {
      "id": "security-1",
      "category": "security",
      "severity": "high",
      "type": "Missing Error Handling",
      "title": "Missing Error Handling vulnerability",
      "description": "Lack of error handling in fetch requests can lead to unhandled promise rejections, causing application crashes.",
      "location": {
        "file": "source/index.ts",
        "line": 53
      },
      "impact": "Unhandled promise rejections affect user experience and system reliability.",
      "remediation": "Add error handling using try-catch blocks around asynchronous operations.",
      "codeSnippet": "\tBeforeErrorHook,",
      "fixedCode": "try {\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return await response.json();\n} catch (error) {\n  console.error('Fetch error:', error);\n}",
      "metadata": {
        "aiExtracted": true
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "id": "quality-2",
      "category": "code-quality",
      "severity": "medium",
      "type": "Unvalidated Input",
      "title": "Unvalidated Input",
      "description": "Using unvalidated input in search parameters can lead to injection attacks, such as XSS or SQL injection.",
      "location": {
        "file": "source/api/search.ts",
        "line": 22
      },
      "impact": "Potential for XSS or SQL injection, compromising user data and application integrity.",
      "remediation": "Use parameterized queries to prevent injection.",
      "codeSnippet": "const results = await db.query(`SELECT * FROM users WHERE name = '${name}'`);",
      "fixedCode": "const results = await db.query('SELECT * FROM users WHERE name = $1', [name]);",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "security-3",
      "category": "security",
      "severity": "critical",
      "type": "Hardcoded Secrets",
      "title": "Hardcoded Secrets vulnerability",
      "description": "Hardcoded credentials found in the code.",
      "location": {
        "file": "source/config.js",
        "line": 10
      },
      "impact": "Can lead to unauthorized access and data breaches.",
      "remediation": "Use environment variables to store sensitive information.",
      "codeSnippet": "const API_KEY = '12345-ABCDE';",
      "fixedCode": "const API_KEY = process.env.API_KEY;",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-6",
      "category": "code-quality",
      "severity": "medium",
      "type": "Uncaught Exceptions in Retry Logic",
      "title": "Uncaught Exceptions in Retry Logic",
      "description": "Uncaught exceptions during retry attempts can cause application crashes.",
      "location": {
        "file": "source/retry.js",
        "line": 30
      },
      "impact": "Can lead to a poor user experience and potentially loss of data.",
      "remediation": "Add error handling within the retry loop.",
      "codeSnippet": "for (let i = 0; i < retries; i++) {\n  await fetch(url);\n}",
      "fixedCode": "for (let i = 0; i < retries; i++) {\n  try {\n    await fetch(url);\n    break;\n  } catch (error) {\n    if (i === retries - 1) throw error;\n  }\n}",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-7",
      "category": "code-quality",
      "severity": "critical",
      "type": "Missing Tests for Critical Functions",
      "title": "Missing Tests for Critical Functions",
      "description": "Critical functions without tests can lead to undetected bugs and regressions.",
      "location": {
        "file": "source/api/payment.ts",
        "line": 45
      },
      "impact": "Jeopardizes the reliability of the application and user trust.",
      "remediation": "Implement unit tests for critical functions.",
      "codeSnippet": "function processPayment(paymentDetails) {\n  // payment processing logic\n}",
      "fixedCode": "test('processPayment', () => {\n  const result = processPayment(paymentDetails);\n  expect(result).toBe(true);\n});",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-8",
      "category": "code-quality",
      "severity": "medium",
      "type": "Outdated Dependencies",
      "title": "Outdated Dependencies",
      "description": "Using outdated dependencies can expose the application to known vulnerabilities and bugs.",
      "location": {
        "file": "package.json",
        "line": 56
      },
      "impact": "Potentially leads to security risks and stability issues.",
      "remediation": "Update dependencies to the latest stable versions.",
      "codeSnippet": "\t\"devDependencies\": {",
      "fixedCode": "\"axios\": \"^0.24.0\",",
      "metadata": {
        "aiExtracted": true
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "id": "security-7",
      "category": "security",
      "severity": "high",
      "type": "Circular Dependency",
      "title": "Circular Dependency vulnerability",
      "description": "Circular dependencies detected which can lead to unpredictable behavior and make the codebase harder to maintain.",
      "location": {
        "file": "source/index.js",
        "line": 5
      },
      "impact": "Complicates debugging and increases the risk of runtime errors.",
      "remediation": "Refactor to eliminate circular dependencies by restructuring modules and separating concerns.",
      "codeSnippet": "import { A } from './a.js';\nimport { B } from './b.js';",
      "fixedCode": "",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-10",
      "category": "code-quality",
      "severity": "low",
      "type": "Missing Index on Frequently Queried Field",
      "title": "Missing Index on Frequently Queried Field",
      "description": "Missing indexes on frequently queried fields can lead to slow query performance.",
      "location": {
        "file": "source/database.js",
        "line": 10
      },
      "impact": "Impacts user experience and application responsiveness as the dataset grows.",
      "remediation": "Add an index on the email field to improve query performance.",
      "codeSnippet": "const results = await db.query('SELECT * FROM users WHERE email = ?', [email]);",
      "fixedCode": "CREATE INDEX idx_email ON users(email);",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-1",
      "category": "code-quality",
      "severity": "high",
      "type": "Missing Error Handling",
      "title": "Missing Error Handling",
      "description": "Lack of error handling in fetch requests can lead to unhandled promise rejections, causing application crashes.",
      "location": {
        "file": "source/index.ts",
        "line": 53
      },
      "impact": "Missing indexes on frequently queried fields can lead to slow query performance.",
      "recommendation": "Add an index on the email field to improve query performance.",
      "metadata": {
        "aiExtracted": true
      },
      "codeSnippet": "\tBeforeErrorHook,",
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "id": "performance-3",
      "category": "performance",
      "severity": "medium",
      "type": "N+1 Query",
      "title": "N+1 Query",
      "description": "Current: High response times with large datasets, Expected: Reduced response times",
      "location": {
        "file": "source/data-fetcher.ts",
        "line": 15
      },
      "impact": "N+1 query problems can lead to excessive database calls, degrading performance.",
      "recommendation": "Fetch all posts in a single query using batch processing.",
      "metadata": {
        "currentPerformance": "High response times with large datasets",
        "expectedPerformance": "Reduced response times",
        "aiExtracted": true
      }
    },
    {
      "id": "dep-outdated-1",
      "category": "dependencies",
      "severity": "low",
      "type": "outdated",
      "title": "Outdated: axios@0.21.1",
      "description": "1 versions behind",
      "message": "Update axios to 0.24.0",
      "recommendation": "Update to 0.24.0",
      "metadata": {
        "packageName": "axios",
        "currentVersion": "0.21.1",
        "latestVersion": "0.24.0",
        "versionsBehind": 1,
        "dependencyType": "outdated",
        "aiExtracted": true
      }
    },
    {
      "id": "quality-3",
      "category": "code-quality",
      "severity": "medium",
      "type": "Inefficient Loop",
      "title": "Inefficient Loop",
      "description": "N+1 query problems can lead to excessive database calls, degrading performance.",
      "location": {
        "file": "source/data-fetcher.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-4",
      "category": "code-quality",
      "severity": "medium",
      "type": "Hardcoded Secrets",
      "title": "Hardcoded Secrets",
      "description": "Hardcoded credentials can lead to unauthorized access and data breaches.",
      "location": {
        "file": "source/config.js",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-5",
      "category": "code-quality",
      "severity": "medium",
      "type": "Duplicate Code Blocks",
      "title": "Duplicate Code Blocks",
      "description": "Duplicate code increases maintenance overhead and can lead to inconsistencies.",
      "location": {
        "file": "source/user.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "arch-1",
      "category": "architecture",
      "severity": "medium",
      "type": "anti-pattern",
      "title": "Circular Dependency",
      "description": "Circular dependencies between source/index.js and source/a.js create tight coupling between modules.",
      "location": {
        "0": "s",
        "1": "o",
        "2": "u",
        "3": "r",
        "4": "c",
        "5": "e",
        "6": "/",
        "7": "i",
        "8": "n",
        "9": "d",
        "10": "e",
        "11": "x",
        "12": ".",
        "13": "j",
        "14": "s",
        "file": "source/index.js"
      },
      "metadata": {
        "patternType": "anti-pattern",
        "aiExtracted": true
      },
      "recommendation": "Refactor to eliminate circular dependencies by restructuring modules and separating concerns."
    },
    {
      "id": "quality-coverage-11",
      "category": "code-quality",
      "severity": "medium",
      "type": "testing",
      "title": "Low test coverage: 67.5%",
      "description": "Increase test coverage to at least 80%",
      "metadata": {
        "metricType": "coverage",
        "overall": 67.5,
        "aiExtracted": true
      }
    },
    {
      "id": "security-4",
      "category": "security",
      "severity": "high",
      "title": "undefined vulnerability",
      "location": {
        "file": "package.json",
        "line": 8
      },
      "impact": "Using deprecated dependencies can lead to security vulnerabilities and increased maintenance costs due to lack of support.",
      "codeSnippet": "\t\"author\": {",
      "metadata": {
        "aiExtracted": true
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "id": "performance-14",
      "category": "performance",
      "severity": "medium",
      "type": "Outdated Documentation",
      "title": "Outdated Documentation",
      "description": "Current: undefined, Expected: undefined",
      "location": {
        "file": "documentation",
        "line": 120
      },
      "recommendation": "Update the README with current examples and usage scenarios to ensure clarity and correctness.",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "dep-outdated-2",
      "category": "dependencies",
      "severity": "low",
      "type": "outdated",
      "title": "Outdated: typescript@5.5.4",
      "description": "unknown versions behind",
      "message": "Update typescript to unknown",
      "recommendation": "Update to unknown",
      "metadata": {
        "packageName": "typescript",
        "currentVersion": "5.5.4",
        "latestVersion": "unknown",
        "versionsBehind": "unknown",
        "dependencyType": "outdated",
        "aiExtracted": true
      },
      "location": {}
    },
    {
      "id": "quality-1",
      "category": "code-quality",
      "severity": "medium",
      "type": "Missing Types",
      "title": "Missing Types",
      "description": "Lack of type safety in hooks, missing proper TypeScript type definitions.",
      "location": {
        "file": "source/index.ts",
        "line": 53
      },
      "metadata": {
        "aiExtracted": true
      },
      "locationMethod": "file-search",
      "locationConfidence": 70,
      "codeSnippet": "\tBeforeErrorHook,"
    },
    {
      "id": "quality-7",
      "category": "code-quality",
      "severity": "high",
      "type": "Code Smell",
      "title": "Code Smell",
      "description": "Lack of modular design in error handling.",
      "location": {
        "file": "package.json"
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "arch-1",
      "category": "architecture",
      "severity": "medium",
      "type": "anti-pattern",
      "title": "Tight Coupling",
      "description": "The system exhibits tight coupling in request handling, which can lead to difficulties in maintenance and scalability.",
      "location": "request handling",
      "recommendation": "Refactor the request handling to use more loosely coupled designs, possibly through the use of middleware or service layers.",
      "metadata": {
        "patternType": "anti-pattern",
        "aiExtracted": true
      }
    },
    {
      "id": "arch-2",
      "category": "architecture",
      "severity": "medium",
      "type": "anti-pattern",
      "title": "Lack of Modular Design",
      "description": "Error handling lacks a modular design, making it hard to manage and extend.",
      "location": "error handling",
      "recommendation": "Implement a more modular error handling system that can be easily modified or replaced as needed without affecting other parts of the system.",
      "metadata": {
        "patternType": "anti-pattern",
        "aiExtracted": true
      }
    }
  ],
  "prBranchIssues": [
    {
      "id": "quality-5",
      "category": "code-quality",
      "severity": "medium",
      "type": "Hardcoded Secrets",
      "title": "Hardcoded Secrets",
      "description": "Hardcoded secrets can lead to unauthorized access if exposed.",
      "location": {
        "file": "source/config.js",
        "line": 5
      },
      "impact": "Exposure of sensitive API key",
      "remediation": "Store sensitive information in environment variables or secure vaults, and reference them in your code",
      "codeSnippet": "const apiKey = '12345-ABCDE'; // hardcoded API key",
      "fixedCode": "const apiKey = process.env.API_KEY;",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "performance-11",
      "category": "performance",
      "severity": "high",
      "type": "Circular Dependency",
      "title": "Circular Dependency",
      "description": "Current: undefined, Expected: undefined",
      "location": {
        "file": "source/moduleA.js",
        "line": 5
      },
      "impact": "Circular dependencies can lead to runtime errors and make the codebase difficult to understand.",
      "recommendation": "Refactor the modules to eliminate circular dependencies by restructuring the code or creating a new module.",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "dep-outdated-1",
      "category": "dependencies",
      "severity": "low",
      "type": "outdated",
      "title": "Outdated: ava@5.3.1",
      "description": "1 versions behind",
      "message": "Update ava to 5.4.0",
      "recommendation": "Update to 5.4.0",
      "metadata": {
        "packageName": "ava",
        "currentVersion": "5.3.1",
        "latestVersion": "5.4.0",
        "versionsBehind": 1,
        "dependencyType": "outdated",
        "aiExtracted": true
      }
    },
    {
      "id": "quality-1",
      "category": "code-quality",
      "severity": "high",
      "type": "Uncaught Error",
      "title": "Uncaught Error",
      "description": "Errors thrown during retries can cause the application to crash or behave unexpectedly.",
      "location": {
        "file": "test/retry.ts",
        "line": 11
      },
      "metadata": {
        "aiExtracted": true
      },
      "locationMethod": "file-search",
      "locationConfidence": 70,
      "codeSnippet": "test('network error', async t => {"
    },
    {
      "id": "quality-2",
      "category": "code-quality",
      "severity": "critical",
      "type": "Outdated Dependency",
      "title": "Outdated Dependency",
      "description": "Using outdated dependencies can expose the application to security vulnerabilities and performance issues.",
      "location": {
        "file": "package.json",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-3",
      "category": "code-quality",
      "severity": "critical",
      "type": "Missing Test Coverage",
      "title": "Missing Test Coverage",
      "description": "Critical functions without tests can lead to undetected bugs and regressions.",
      "location": {
        "file": "source/api/payment.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-4",
      "category": "code-quality",
      "severity": "medium",
      "type": "Synchronous Blocking Operation",
      "title": "Synchronous Blocking Operation",
      "description": "Synchronous blocking operations can lead to performance bottlenecks, causing the application to become unresponsive.",
      "location": {
        "file": "test/hooks.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-6",
      "category": "code-quality",
      "severity": "medium",
      "type": "Deep Nesting",
      "title": "Deep Nesting",
      "description": "Deeply nested code can be difficult to read and maintain, leading to increased complexity and potential bugs.",
      "location": {
        "file": "source/index.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-7",
      "category": "code-quality",
      "severity": "medium",
      "type": "Inefficient Algorithm",
      "title": "Inefficient Algorithm",
      "description": "Inefficient algorithms can lead to performance degradation, especially with large datasets.",
      "location": {
        "file": "source/utils.js",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-8",
      "category": "code-quality",
      "severity": "critical",
      "type": "Unused Dependencies",
      "title": "Unused Dependencies",
      "description": "Unused dependencies increase the size of the application and can lead to security vulnerabilities.",
      "location": {
        "file": "package.json",
        "line": 56
      },
      "metadata": {
        "aiExtracted": true
      },
      "locationMethod": "file-search",
      "locationConfidence": 70,
      "codeSnippet": "\t\"devDependencies\": {"
    },
    {
      "id": "quality-9",
      "category": "code-quality",
      "severity": "low",
      "type": "Test Quality Issues",
      "title": "Test Quality Issues",
      "description": "Low-quality tests can lead to false confidence in the application’s stability.",
      "location": {
        "file": "test/unit/test.js",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-10",
      "category": "code-quality",
      "severity": "medium",
      "type": "Missing Abstraction",
      "title": "Missing Abstraction",
      "description": "Missing abstractions can lead to code duplication and difficulties in maintaining the codebase.",
      "location": {
        "file": "source/components/component.js",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "arch-1",
      "category": "architecture",
      "severity": "medium",
      "type": "anti-pattern",
      "title": "Circular Dependency",
      "description": "Circular dependencies between moduleA and moduleB complicate the module loading process and can cause unexpected behavior.",
      "location": {
        "0": "m",
        "1": "o",
        "2": "d",
        "3": "u",
        "4": "l",
        "5": "e",
        "6": "A",
        "7": ".",
        "8": "j",
        "9": "s",
        "10": ",",
        "11": " ",
        "12": "m",
        "13": "o",
        "14": "d",
        "15": "u",
        "16": "l",
        "17": "e",
        "18": "B",
        "19": ".",
        "20": "j",
        "21": "s",
        "file": "source/moduleA.js"
      },
      "metadata": {
        "patternType": "anti-pattern",
        "aiExtracted": true
      },
      "recommendation": "Refactor the modules to eliminate circular dependencies by restructuring the code or creating a new module to hold shared logic."
    },
    {
      "id": "quality-coverage-12",
      "category": "code-quality",
      "severity": "medium",
      "type": "testing",
      "title": "Low test coverage: 67.5%",
      "description": "Increase test coverage to at least 80%",
      "metadata": {
        "metricType": "coverage",
        "overall": 67.5,
        "aiExtracted": true
      }
    },
    {
      "title": "Inconsistent Error Handling in HTTP Requests",
      "severity": "high",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 120,
      "codeSnippet": "import {HTTPError} from '../errors/HTTPError.js';",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 1
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Missing Type Checks for Response Parsing",
      "severity": "medium",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 145,
      "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 77
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Inefficient Retry Logic Implementation",
      "severity": "medium",
      "category": "performance",
      "file": "test/retry.ts",
      "line": 60,
      "codeSnippet": "const defaultRetryCount = 2;",
      "location": {
        "file": "test/retry.ts",
        "line": 7
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Potential Race Condition in Network Requests",
      "severity": "high",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 200,
      "codeSnippet": "\tsupportsRequestStreams,",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 26
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Uncaught Promise Rejections in Tests",
      "severity": "high",
      "category": "testing",
      "file": "test/browser.ts",
      "line": 75,
      "codeSnippet": "\tconst results = await page.evaluate(async (url: string) => Promise.all([",
      "location": {
        "file": "test/browser.ts",
        "line": 67
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Lack of Tests for Edge Cases in Retry Logic",
      "severity": "medium",
      "category": "testing",
      "file": "test/retry.ts",
      "line": 20,
      "codeSnippet": "import {createHttpTestServer} from './helpers/create-http-test-server.js';",
      "location": {
        "file": "test/retry.ts",
        "line": 3
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Unoptimized JSON Response Handling",
      "severity": "medium",
      "category": "performance",
      "file": "source/core/Ky.ts",
      "line": 300,
      "codeSnippet": "\t\t\t\tif (type === 'json') {",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 110
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Missing CORS Handling in Network Requests",
      "severity": "high",
      "category": "security",
      "file": "source/core/Ky.ts",
      "line": 10,
      "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 77
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Hardcoded URLs in Tests",
      "severity": "medium",
      "category": "code-quality",
      "file": "test/browser.ts",
      "line": 15,
      "codeSnippet": "import {createHttpTestServer, type ExtendedHttpTestServer, type HttpServerOptions} from './helpers/create-http-test-server.js';",
      "location": {
        "file": "test/browser.ts",
        "line": 7
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Unused Variables in Code",
      "severity": "low",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 400,
      "codeSnippet": "\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 244
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    }
  ],
  "categorized": {
    "newIssues": [
      {
        "issue": {
          "id": "quality-5",
          "category": "code-quality",
          "severity": "medium",
          "type": "Hardcoded Secrets",
          "title": "Hardcoded Secrets",
          "description": "Hardcoded secrets can lead to unauthorized access if exposed.",
          "location": {
            "file": "source/config.js",
            "line": 5
          },
          "impact": "Exposure of sensitive API key",
          "remediation": "Store sensitive information in environment variables or secure vaults, and reference them in your code",
          "codeSnippet": "const apiKey = '12345-ABCDE'; // hardcoded API key",
          "fixedCode": "const apiKey = process.env.API_KEY;",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/config.js|code-quality|medium|hardcoded-lead-secrets-unauthorized",
        "confidence": 1
      },
      {
        "issue": {
          "id": "performance-11",
          "category": "performance",
          "severity": "high",
          "type": "Circular Dependency",
          "title": "Circular Dependency",
          "description": "Current: undefined, Expected: undefined",
          "location": {
            "file": "source/moduleA.js",
            "line": 5
          },
          "impact": "Circular dependencies can lead to runtime errors and make the codebase difficult to understand.",
          "recommendation": "Refactor the modules to eliminate circular dependencies by restructuring the code or creating a new module.",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/modulea.js|performance|high|current-expected-undefined",
        "confidence": 1
      },
      {
        "issue": {
          "id": "dep-outdated-1",
          "category": "dependencies",
          "severity": "low",
          "type": "outdated",
          "title": "Outdated: ava@5.3.1",
          "description": "1 versions behind",
          "message": "Update ava to 5.4.0",
          "recommendation": "Update to 5.4.0",
          "metadata": {
            "packageName": "ava",
            "currentVersion": "5.3.1",
            "latestVersion": "5.4.0",
            "versionsBehind": 1,
            "dependencyType": "outdated",
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "unknown|dependencies|low|update",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-1",
          "category": "code-quality",
          "severity": "high",
          "type": "Uncaught Error",
          "title": "Uncaught Error",
          "description": "Errors thrown during retries can cause the application to crash or behave unexpectedly.",
          "location": {
            "file": "test/retry.ts",
            "line": 11
          },
          "metadata": {
            "aiExtracted": true
          },
          "locationMethod": "file-search",
          "locationConfidence": 70,
          "codeSnippet": "test('network error', async t => {"
        },
        "category": "new",
        "matchKey": "test/retry.ts|code-quality|high|during-error-errors-throw-thrown",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-4",
          "category": "code-quality",
          "severity": "medium",
          "type": "Synchronous Blocking Operation",
          "title": "Synchronous Blocking Operation",
          "description": "Synchronous blocking operations can lead to performance bottlenecks, causing the application to become unresponsive.",
          "location": {
            "file": "test/hooks.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "test/hooks.ts|code-quality|medium|blocking-operations-performance-synchronous",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-6",
          "category": "code-quality",
          "severity": "medium",
          "type": "Deep Nesting",
          "title": "Deep Nesting",
          "description": "Deeply nested code can be difficult to read and maintain, leading to increased complexity and potential bugs.",
          "location": {
            "file": "source/index.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/index.ts|code-quality|medium|code-deeply-nested",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-7",
          "category": "code-quality",
          "severity": "medium",
          "type": "Inefficient Algorithm",
          "title": "Inefficient Algorithm",
          "description": "Inefficient algorithms can lead to performance degradation, especially with large datasets.",
          "location": {
            "file": "source/utils.js",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/utils.js|code-quality|medium|algorithms-inefficient-lead-performance",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-8",
          "category": "code-quality",
          "severity": "critical",
          "type": "Unused Dependencies",
          "title": "Unused Dependencies",
          "description": "Unused dependencies increase the size of the application and can lead to security vulnerabilities.",
          "location": {
            "file": "package.json",
            "line": 56
          },
          "metadata": {
            "aiExtracted": true
          },
          "locationMethod": "file-search",
          "locationConfidence": 70,
          "codeSnippet": "\t\"devDependencies\": {"
        },
        "category": "new",
        "matchKey": "package.json|code-quality|critical|dependencies-increase-security-size-unused",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-9",
          "category": "code-quality",
          "severity": "low",
          "type": "Test Quality Issues",
          "title": "Test Quality Issues",
          "description": "Low-quality tests can lead to false confidence in the application’s stability.",
          "location": {
            "file": "test/unit/test.js",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "test/unit/test.js|code-quality|low|lead-lowquality-tests",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-10",
          "category": "code-quality",
          "severity": "medium",
          "type": "Missing Abstraction",
          "title": "Missing Abstraction",
          "description": "Missing abstractions can lead to code duplication and difficulties in maintaining the codebase.",
          "location": {
            "file": "source/components/component.js",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/components/component.js|code-quality|medium|abstractions-code-lead-missing",
        "confidence": 1
      },
      {
        "issue": {
          "id": "arch-1",
          "category": "architecture",
          "severity": "medium",
          "type": "anti-pattern",
          "title": "Circular Dependency",
          "description": "Circular dependencies between moduleA and moduleB complicate the module loading process and can cause unexpected behavior.",
          "location": {
            "0": "m",
            "1": "o",
            "2": "d",
            "3": "u",
            "4": "l",
            "5": "e",
            "6": "A",
            "7": ".",
            "8": "j",
            "9": "s",
            "10": ",",
            "11": " ",
            "12": "m",
            "13": "o",
            "14": "d",
            "15": "u",
            "16": "l",
            "17": "e",
            "18": "B",
            "19": ".",
            "20": "j",
            "21": "s",
            "file": "source/moduleA.js"
          },
          "metadata": {
            "patternType": "anti-pattern",
            "aiExtracted": true
          },
          "recommendation": "Refactor the modules to eliminate circular dependencies by restructuring the code or creating a new module to hold shared logic."
        },
        "category": "new",
        "matchKey": "source/modulea.js|architecture|medium|between-circular-dependencies",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Inconsistent Error Handling in HTTP Requests",
          "severity": "high",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 120,
          "codeSnippet": "import {HTTPError} from '../errors/HTTPError.js';",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 1
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|code-quality|high|error-handling-http-inconsistent",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Missing Type Checks for Response Parsing",
          "severity": "medium",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 145,
          "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 77
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|code-quality|medium|checks-missing-parsing-response-type",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Inefficient Retry Logic Implementation",
          "severity": "medium",
          "category": "performance",
          "file": "test/retry.ts",
          "line": 60,
          "codeSnippet": "const defaultRetryCount = 2;",
          "location": {
            "file": "test/retry.ts",
            "line": 7
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/retry.ts|performance|medium|inefficient-logic-retry",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Potential Race Condition in Network Requests",
          "severity": "high",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 200,
          "codeSnippet": "\tsupportsRequestStreams,",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 26
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|code-quality|high|condition-network-potential-race-requests",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Uncaught Promise Rejections in Tests",
          "severity": "high",
          "category": "testing",
          "file": "test/browser.ts",
          "line": 75,
          "codeSnippet": "\tconst results = await page.evaluate(async (url: string) => Promise.all([",
          "location": {
            "file": "test/browser.ts",
            "line": 67
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/browser.ts|testing|high|promise-rejections-uncaught",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Lack of Tests for Edge Cases in Retry Logic",
          "severity": "medium",
          "category": "testing",
          "file": "test/retry.ts",
          "line": 20,
          "codeSnippet": "import {createHttpTestServer} from './helpers/create-http-test-server.js';",
          "location": {
            "file": "test/retry.ts",
            "line": 3
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/retry.ts|testing|medium|edge-lack-tests",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Unoptimized JSON Response Handling",
          "severity": "medium",
          "category": "performance",
          "file": "source/core/Ky.ts",
          "line": 300,
          "codeSnippet": "\t\t\t\tif (type === 'json') {",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 110
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|performance|medium|json-response-unoptimized",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Missing CORS Handling in Network Requests",
          "severity": "high",
          "category": "security",
          "file": "source/core/Ky.ts",
          "line": 10,
          "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 77
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|security|high|cors-handling-missing-network",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Hardcoded URLs in Tests",
          "severity": "medium",
          "category": "code-quality",
          "file": "test/browser.ts",
          "line": 15,
          "codeSnippet": "import {createHttpTestServer, type ExtendedHttpTestServer, type HttpServerOptions} from './helpers/create-http-test-server.js';",
          "location": {
            "file": "test/browser.ts",
            "line": 7
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/browser.ts|code-quality|medium|hardcoded-tests-urls",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Unused Variables in Code",
          "severity": "low",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 400,
          "codeSnippet": "\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 244
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|code-quality|low|code-unused-variables",
        "confidence": 1
      }
    ],
    "fixedIssues": [
      {
        "issue": {
          "id": "security-1",
          "category": "security",
          "severity": "high",
          "type": "Missing Error Handling",
          "title": "Missing Error Handling vulnerability",
          "description": "Lack of error handling in fetch requests can lead to unhandled promise rejections, causing application crashes.",
          "location": {
            "file": "source/index.ts",
            "line": 53
          },
          "impact": "Unhandled promise rejections affect user experience and system reliability.",
          "remediation": "Add error handling using try-catch blocks around asynchronous operations.",
          "codeSnippet": "\tBeforeErrorHook,",
          "fixedCode": "try {\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return await response.json();\n} catch (error) {\n  console.error('Fetch error:', error);\n}",
          "metadata": {
            "aiExtracted": true
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "source/index.ts|security|high|error-fetch-handle-handling-lack",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-2",
          "category": "code-quality",
          "severity": "medium",
          "type": "Unvalidated Input",
          "title": "Unvalidated Input",
          "description": "Using unvalidated input in search parameters can lead to injection attacks, such as XSS or SQL injection.",
          "location": {
            "file": "source/api/search.ts",
            "line": 22
          },
          "impact": "Potential for XSS or SQL injection, compromising user data and application integrity.",
          "remediation": "Use parameterized queries to prevent injection.",
          "codeSnippet": "const results = await db.query(`SELECT * FROM users WHERE name = '${name}'`);",
          "fixedCode": "const results = await db.query('SELECT * FROM users WHERE name = $1', [name]);",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/api/search.ts|code-quality|medium|injection-input-unvalidated-using-xss",
        "confidence": 1
      },
      {
        "issue": {
          "id": "security-3",
          "category": "security",
          "severity": "critical",
          "type": "Hardcoded Secrets",
          "title": "Hardcoded Secrets vulnerability",
          "description": "Hardcoded credentials found in the code.",
          "location": {
            "file": "source/config.js",
            "line": 10
          },
          "impact": "Can lead to unauthorized access and data breaches.",
          "remediation": "Use environment variables to store sensitive information.",
          "codeSnippet": "const API_KEY = '12345-ABCDE';",
          "fixedCode": "const API_KEY = process.env.API_KEY;",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/config.js|security|critical|code-credential-credentials-found-hardcoded",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-6",
          "category": "code-quality",
          "severity": "medium",
          "type": "Uncaught Exceptions in Retry Logic",
          "title": "Uncaught Exceptions in Retry Logic",
          "description": "Uncaught exceptions during retry attempts can cause application crashes.",
          "location": {
            "file": "source/retry.js",
            "line": 30
          },
          "impact": "Can lead to a poor user experience and potentially loss of data.",
          "remediation": "Add error handling within the retry loop.",
          "codeSnippet": "for (let i = 0; i < retries; i++) {\n  await fetch(url);\n}",
          "fixedCode": "for (let i = 0; i < retries; i++) {\n  try {\n    await fetch(url);\n    break;\n  } catch (error) {\n    if (i === retries - 1) throw error;\n  }\n}",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/retry.js|code-quality|medium|during-exceptions-uncaught",
        "confidence": 1
      },
      {
        "issue": {
          "id": "security-7",
          "category": "security",
          "severity": "high",
          "type": "Circular Dependency",
          "title": "Circular Dependency vulnerability",
          "description": "Circular dependencies detected which can lead to unpredictable behavior and make the codebase harder to maintain.",
          "location": {
            "file": "source/index.js",
            "line": 5
          },
          "impact": "Complicates debugging and increases the risk of runtime errors.",
          "remediation": "Refactor to eliminate circular dependencies by restructuring modules and separating concerns.",
          "codeSnippet": "import { A } from './a.js';\nimport { B } from './b.js';",
          "fixedCode": "",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/index.js|security|high|circular-dependencies-detected",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-10",
          "category": "code-quality",
          "severity": "low",
          "type": "Missing Index on Frequently Queried Field",
          "title": "Missing Index on Frequently Queried Field",
          "description": "Missing indexes on frequently queried fields can lead to slow query performance.",
          "location": {
            "file": "source/database.js",
            "line": 10
          },
          "impact": "Impacts user experience and application responsiveness as the dataset grows.",
          "remediation": "Add an index on the email field to improve query performance.",
          "codeSnippet": "const results = await db.query('SELECT * FROM users WHERE email = ?', [email]);",
          "fixedCode": "CREATE INDEX idx_email ON users(email);",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/database.js|code-quality|low|frequently-indexes-missing-performance-queried-slow",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-1",
          "category": "code-quality",
          "severity": "high",
          "type": "Missing Error Handling",
          "title": "Missing Error Handling",
          "description": "Lack of error handling in fetch requests can lead to unhandled promise rejections, causing application crashes.",
          "location": {
            "file": "source/index.ts",
            "line": 53
          },
          "impact": "Missing indexes on frequently queried fields can lead to slow query performance.",
          "recommendation": "Add an index on the email field to improve query performance.",
          "metadata": {
            "aiExtracted": true
          },
          "codeSnippet": "\tBeforeErrorHook,",
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "source/index.ts|code-quality|high|error-fetch-handle-handling-lack",
        "confidence": 1
      },
      {
        "issue": {
          "id": "performance-3",
          "category": "performance",
          "severity": "medium",
          "type": "N+1 Query",
          "title": "N+1 Query",
          "description": "Current: High response times with large datasets, Expected: Reduced response times",
          "location": {
            "file": "source/data-fetcher.ts",
            "line": 15
          },
          "impact": "N+1 query problems can lead to excessive database calls, degrading performance.",
          "recommendation": "Fetch all posts in a single query using batch processing.",
          "metadata": {
            "currentPerformance": "High response times with large datasets",
            "expectedPerformance": "Reduced response times",
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/data-fetcher.ts|performance|medium|current-high-response",
        "confidence": 1
      },
      {
        "issue": {
          "id": "dep-outdated-1",
          "category": "dependencies",
          "severity": "low",
          "type": "outdated",
          "title": "Outdated: axios@0.21.1",
          "description": "1 versions behind",
          "message": "Update axios to 0.24.0",
          "recommendation": "Update to 0.24.0",
          "metadata": {
            "packageName": "axios",
            "currentVersion": "0.21.1",
            "latestVersion": "0.24.0",
            "versionsBehind": 1,
            "dependencyType": "outdated",
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "unknown|dependencies|low|axios-update",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-3",
          "category": "code-quality",
          "severity": "medium",
          "type": "Inefficient Loop",
          "title": "Inefficient Loop",
          "description": "N+1 query problems can lead to excessive database calls, degrading performance.",
          "location": {
            "file": "source/data-fetcher.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/data-fetcher.ts|code-quality|medium|lead-performance-problems-query",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-4",
          "category": "code-quality",
          "severity": "medium",
          "type": "Hardcoded Secrets",
          "title": "Hardcoded Secrets",
          "description": "Hardcoded credentials can lead to unauthorized access and data breaches.",
          "location": {
            "file": "source/config.js",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/config.js|code-quality|medium|credential-credentials-hardcoded-lead-unauthorized",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-5",
          "category": "code-quality",
          "severity": "medium",
          "type": "Duplicate Code Blocks",
          "title": "Duplicate Code Blocks",
          "description": "Duplicate code increases maintenance overhead and can lead to inconsistencies.",
          "location": {
            "file": "source/user.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/user.ts|code-quality|medium|code-duplicate-increases",
        "confidence": 1
      },
      {
        "issue": {
          "id": "arch-1",
          "category": "architecture",
          "severity": "medium",
          "type": "anti-pattern",
          "title": "Circular Dependency",
          "description": "Circular dependencies between source/index.js and source/a.js create tight coupling between modules.",
          "location": {
            "0": "s",
            "1": "o",
            "2": "u",
            "3": "r",
            "4": "c",
            "5": "e",
            "6": "/",
            "7": "i",
            "8": "n",
            "9": "d",
            "10": "e",
            "11": "x",
            "12": ".",
            "13": "j",
            "14": "s",
            "file": "source/index.js"
          },
          "metadata": {
            "patternType": "anti-pattern",
            "aiExtracted": true
          },
          "recommendation": "Refactor to eliminate circular dependencies by restructuring modules and separating concerns."
        },
        "category": "fixed",
        "matchKey": "source/index.js|architecture|medium|between-circular-dependencies",
        "confidence": 1
      },
      {
        "issue": {
          "id": "security-4",
          "category": "security",
          "severity": "high",
          "title": "undefined vulnerability",
          "location": {
            "file": "package.json",
            "line": 8
          },
          "impact": "Using deprecated dependencies can lead to security vulnerabilities and increased maintenance costs due to lack of support.",
          "codeSnippet": "\t\"author\": {",
          "metadata": {
            "aiExtracted": true
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "package.json|security|high|undefined-vulnerability",
        "confidence": 1
      },
      {
        "issue": {
          "id": "performance-14",
          "category": "performance",
          "severity": "medium",
          "type": "Outdated Documentation",
          "title": "Outdated Documentation",
          "description": "Current: undefined, Expected: undefined",
          "location": {
            "file": "documentation",
            "line": 120
          },
          "recommendation": "Update the README with current examples and usage scenarios to ensure clarity and correctness.",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "documentation|performance|medium|current-expected-undefined",
        "confidence": 1
      },
      {
        "issue": {
          "id": "dep-outdated-2",
          "category": "dependencies",
          "severity": "low",
          "type": "outdated",
          "title": "Outdated: typescript@5.5.4",
          "description": "unknown versions behind",
          "message": "Update typescript to unknown",
          "recommendation": "Update to unknown",
          "metadata": {
            "packageName": "typescript",
            "currentVersion": "5.5.4",
            "latestVersion": "unknown",
            "versionsBehind": "unknown",
            "dependencyType": "outdated",
            "aiExtracted": true
          },
          "location": {}
        },
        "category": "fixed",
        "matchKey": "unknown|dependencies|low|type-typescript-unknown-update",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-1",
          "category": "code-quality",
          "severity": "medium",
          "type": "Missing Types",
          "title": "Missing Types",
          "description": "Lack of type safety in hooks, missing proper TypeScript type definitions.",
          "location": {
            "file": "source/index.ts",
            "line": 53
          },
          "metadata": {
            "aiExtracted": true
          },
          "locationMethod": "file-search",
          "locationConfidence": 70,
          "codeSnippet": "\tBeforeErrorHook,"
        },
        "category": "fixed",
        "matchKey": "source/index.ts|code-quality|medium|hooks-lack-missing-safety-type",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-7",
          "category": "code-quality",
          "severity": "high",
          "type": "Code Smell",
          "title": "Code Smell",
          "description": "Lack of modular design in error handling.",
          "location": {
            "file": "package.json"
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "package.json|code-quality|high|design-error-lack-modular",
        "confidence": 1
      },
      {
        "issue": {
          "id": "arch-1",
          "category": "architecture",
          "severity": "medium",
          "type": "anti-pattern",
          "title": "Tight Coupling",
          "description": "The system exhibits tight coupling in request handling, which can lead to difficulties in maintenance and scalability.",
          "location": "request handling",
          "recommendation": "Refactor the request handling to use more loosely coupled designs, possibly through the use of middleware or service layers.",
          "metadata": {
            "patternType": "anti-pattern",
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "unknown|architecture|medium|exhibits-system-tight",
        "confidence": 1
      },
      {
        "issue": {
          "id": "arch-2",
          "category": "architecture",
          "severity": "medium",
          "type": "anti-pattern",
          "title": "Lack of Modular Design",
          "description": "Error handling lacks a modular design, making it hard to manage and extend.",
          "location": "error handling",
          "recommendation": "Implement a more modular error handling system that can be easily modified or replaced as needed without affecting other parts of the system.",
          "metadata": {
            "patternType": "anti-pattern",
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "unknown|architecture|medium|error-handling-lacks-modular",
        "confidence": 1
      }
    ],
    "unchangedIssues": [
      {
        "issue": {
          "id": "quality-2",
          "category": "code-quality",
          "severity": "critical",
          "type": "Outdated Dependency",
          "title": "Outdated Dependency",
          "description": "Using outdated dependencies can expose the application to security vulnerabilities and performance issues.",
          "location": {
            "file": "package.json",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "unchanged",
        "matchKey": "package.json|code-quality|critical|dependencies-outdated-performance-security-using",
        "confidence": 0.7249999999999999
      },
      {
        "issue": {
          "id": "quality-3",
          "category": "code-quality",
          "severity": "critical",
          "type": "Missing Test Coverage",
          "title": "Missing Test Coverage",
          "description": "Critical functions without tests can lead to undetected bugs and regressions.",
          "location": {
            "file": "source/api/payment.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "unchanged",
        "matchKey": "source/api/payment.ts|code-quality|critical|critical-functions-without",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-coverage-12",
          "category": "code-quality",
          "severity": "medium",
          "type": "testing",
          "title": "Low test coverage: 67.5%",
          "description": "Increase test coverage to at least 80%",
          "metadata": {
            "metricType": "coverage",
            "overall": 67.5,
            "aiExtracted": true
          }
        },
        "category": "unchanged",
        "matchKey": "unknown|code-quality|medium|coverage-increase-test",
        "confidence": 1
      }
    ],
    "summary": {
      "totalNew": 21,
      "totalFixed": 20,
      "totalUnchanged": 3,
      "netImpact": 1,
      "prQualityScore": 0
    },
    "recommendations": [
      "🚨 BLOCKING: Fix 1 critical issue(s) introduced by this PR",
      "⚠️ Address 6 high-severity issue(s) introduced by this PR",
      "🎉 Excellent! Fixed 1 critical and 5 high severity issues",
      "🔴 Significant issues detected. This PR needs work before merging."
    ]
  },
  "metadata": {
    "analysisDate": "2025-08-25T19:29:32.918Z",
    "mainBranchAnalysisDuration": 168.2,
    "prBranchAnalysisDuration": 97.9,
    "totalDuration": 266.1,
    "modelUsed": "dynamic-selection",
    "iterationsPerBranch": 3,
    "tokensUsed": 0
  }
}