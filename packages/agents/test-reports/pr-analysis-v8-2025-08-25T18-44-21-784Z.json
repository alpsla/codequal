{
  "repositoryUrl": "https://github.com/sindresorhus/ky",
  "prNumber": 700,
  "mainBranchIssues": [
    {
      "id": "security-1",
      "category": "security",
      "severity": "high",
      "type": "XSS",
      "title": "XSS vulnerability",
      "description": "Improper handling of user input can lead to cross-site scripting (XSS) attacks, compromising user data and application integrity.",
      "location": {
        "file": "test/browser.ts",
        "line": 45
      },
      "impact": "Attackers could inject malicious scripts that execute in the context of the user's browser.",
      "remediation": "Sanitize all user input before rendering it in the response. Use libraries like DOMPurify to clean user input.",
      "codeSnippet": "response.writeHead(303, {Connection: 'close', Location: '/'});",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "security-2",
      "category": "security",
      "severity": "critical",
      "type": "Hardcoded Secrets",
      "title": "Hardcoded Secrets vulnerability",
      "description": "Hardcoded secrets can be easily extracted from the source code, leading to unauthorized access and potential data breaches.",
      "location": {
        "file": "source/core/constants.ts",
        "line": 10
      },
      "impact": "This poses a significant risk to the application's security and compliance.",
      "remediation": "Remove hardcoded secrets and use environment variables or secret management tools to store sensitive information securely.",
      "codeSnippet": "export const secretKey = 'my-secret-key';",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "performance-7",
      "category": "performance",
      "severity": "high",
      "type": "Untested Critical Function",
      "title": "Untested Critical Function",
      "description": "Current: undefined, Expected: undefined",
      "location": {
        "file": "source/api/payment.ts",
        "line": 60,
        "lines": "45-89"
      },
      "recommendation": "Implement comprehensive tests for the 'processPayment' function to ensure its correctness and reliability.",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "dep-outdated-1",
      "category": "dependencies",
      "severity": "low",
      "type": "outdated",
      "title": "Outdated: ava@^5.3.1",
      "description": "1 versions behind",
      "message": "Update ava to ^5.4.0",
      "recommendation": "Update to ^5.4.0",
      "metadata": {
        "packageName": "ava",
        "currentVersion": "^5.3.1",
        "latestVersion": "^5.4.0",
        "versionsBehind": 1,
        "dependencyType": "outdated",
        "aiExtracted": true
      }
    },
    {
      "id": "quality-2",
      "category": "code-quality",
      "severity": "critical",
      "type": "Security Vulnerability",
      "title": "Security Vulnerability",
      "description": "Hardcoded secrets in code can be easily extracted, leading to unauthorized access.",
      "location": {
        "file": "source/core/constants.ts"
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-3",
      "category": "code-quality",
      "severity": "medium",
      "type": "Outdated Dependency",
      "title": "Outdated Dependency",
      "description": "Using outdated dependencies exposes the application to vulnerabilities and performance issues.",
      "location": {
        "file": "package.json",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-4",
      "category": "code-quality",
      "severity": "high",
      "type": "Testing Issue",
      "title": "Testing Issue",
      "description": "Uncaught promise rejections in tests can lead to test failures that are hard to diagnose.",
      "location": {
        "file": "test/main.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-complexity-6",
      "category": "code-quality",
      "severity": "low",
      "type": "complexity",
      "title": "High complexity in undefined",
      "description": "Complexity: undefined",
      "location": {
        "file": "test/hooks.ts",
        "line": 286
      },
      "recommendation": "Refactor to reduce complexity",
      "metadata": {
        "metricType": "complexity",
        "aiExtracted": true
      },
      "codeSnippet": "\t\t\t\t\t\t\treturn undefined;",
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "id": "quality-coverage-7",
      "category": "code-quality",
      "severity": "medium",
      "type": "testing",
      "title": "Low test coverage: 67.5%",
      "description": "Increase test coverage to at least 80%",
      "metadata": {
        "metricType": "coverage",
        "overall": 67.5,
        "aiExtracted": true
      }
    },
    {
      "title": "Improper Handling of HTTP Status Codes",
      "severity": "high",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 120,
      "codeSnippet": "import {HTTPError} from '../errors/HTTPError.js';",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 1
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Lack of Error Handling in Retry Logic",
      "severity": "medium",
      "category": "code-quality",
      "file": "test/retry.ts",
      "line": 30,
      "codeSnippet": "test('network error', async t => {",
      "location": {
        "file": "test/retry.ts",
        "line": 11
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Missing Type Checks for Response Data",
      "severity": "medium",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 210,
      "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 77
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Inefficient Use of Promises in Tests",
      "severity": "low",
      "category": "testing",
      "file": "test/main.ts",
      "line": 45,
      "codeSnippet": "import {createHttpTestServer} from './helpers/create-http-test-server.js';",
      "location": {
        "file": "test/main.ts",
        "line": 6
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Potential for Unhandled Promise Rejections",
      "severity": "high",
      "category": "code-quality",
      "file": "test/browser.ts",
      "line": 85,
      "codeSnippet": "\tconst results = await page.evaluate(async (url: string) => Promise.all([",
      "location": {
        "file": "test/browser.ts",
        "line": 67
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Hardcoded Timeout Values in Tests",
      "severity": "medium",
      "category": "testing",
      "file": "test/retry.ts",
      "line": 60,
      "codeSnippet": "\t\t\tmessage: /Request Timeout/,",
      "location": {
        "file": "test/retry.ts",
        "line": 301
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Missing Unit Tests for Edge Cases",
      "severity": "high",
      "category": "testing",
      "file": "test/main.ts",
      "line": 90,
      "codeSnippet": "import {createHttpTestServer} from './helpers/create-http-test-server.js';",
      "location": {
        "file": "test/main.ts",
        "line": 6
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Inconsistent Error Messages in Tests",
      "severity": "medium",
      "category": "testing",
      "file": "test/retry.ts",
      "line": 120,
      "codeSnippet": "test('network error', async t => {",
      "location": {
        "file": "test/retry.ts",
        "line": 11
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Redundant Dependencies in package.json",
      "severity": "low",
      "category": "dependencies",
      "file": "package.json",
      "line": 0,
      "codeSnippet": "\t\"devDependencies\": {",
      "location": {
        "file": "package.json",
        "line": 56
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Inefficient JSON Parsing in Response Handling",
      "severity": "medium",
      "category": "performance",
      "file": "source/core/Ky.ts",
      "line": 230,
      "codeSnippet": "\t\t\t\tif (type === 'json') {",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 110
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    }
  ],
  "prBranchIssues": [
    {
      "id": "security-1",
      "category": "security",
      "severity": "high",
      "type": "Hardcoded API Endpoint",
      "title": "Hardcoded API Endpoint vulnerability",
      "description": "Hardcoded endpoints can lead to security vulnerabilities, such as exposing sensitive data or allowing for potential attacks if the endpoint is compromised. This is critical in production environments.",
      "location": {
        "file": "source/api.js",
        "line": 15
      },
      "impact": "Exposing sensitive data or allowing for potential attacks if the endpoint is compromised",
      "remediation": "Use environment variables to store sensitive data like API endpoints",
      "codeSnippet": "const API_URL = 'https://api.example.com/data';",
      "fixedCode": "const API_URL = process.env.API_URL;",
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-1",
      "category": "code-quality",
      "severity": "high",
      "type": "Missing Error Handling",
      "title": "Missing Error Handling",
      "description": "Missing error handling in fetch requests could lead to unhandled promise rejections and application crashes.",
      "location": {
        "file": "source/index.ts",
        "line": 53
      },
      "impact": "Critical functions without tests can lead to undetected bugs and regressions, impacting the reliability of the application. This can lead to increased maintenance costs and reduced user trust.",
      "recommendation": "Add unit tests for the processPayment function to ensure it works as expected.",
      "metadata": {
        "aiExtracted": true
      },
      "codeSnippet": "\tBeforeErrorHook,",
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "id": "dep-outdated-1",
      "category": "dependencies",
      "severity": "low",
      "type": "outdated",
      "title": "Outdated: axios@0.21.1",
      "description": "1 versions behind",
      "message": "Update axios to 0.24.0",
      "recommendation": "Update to 0.24.0",
      "metadata": {
        "packageName": "axios",
        "currentVersion": "0.21.1",
        "latestVersion": "0.24.0",
        "versionsBehind": 1,
        "dependencyType": "outdated",
        "aiExtracted": true
      }
    },
    {
      "id": "quality-2",
      "category": "code-quality",
      "severity": "medium",
      "type": "Memory Leak",
      "title": "Memory Leak",
      "description": "Potential memory leak due to event listeners not being removed.",
      "location": {
        "file": "test/browser.ts",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-3",
      "category": "code-quality",
      "severity": "critical",
      "type": "Hardcoded API Endpoint",
      "title": "Hardcoded API Endpoint",
      "description": "Hardcoded API endpoint can lead to security vulnerabilities.",
      "location": {
        "file": "source/api.js",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-4",
      "category": "code-quality",
      "severity": "medium",
      "type": "Unused Dependency",
      "title": "Unused Dependency",
      "description": "Unused dependencies in package.json can lead to unnecessary bloat and potential vulnerabilities.",
      "location": {
        "file": "package.json",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-5",
      "category": "code-quality",
      "severity": "critical",
      "type": "Lack of Tests",
      "title": "Lack of Tests",
      "description": "Critical functions without tests can lead to undetected bugs and regressions.",
      "location": {
        "file": "source/functions.js",
        "line": 0
      },
      "metadata": {
        "aiExtracted": true
      }
    },
    {
      "id": "quality-coverage-6",
      "category": "code-quality",
      "severity": "medium",
      "type": "testing",
      "title": "Low test coverage: 67.5%",
      "description": "Increase test coverage to at least 80%",
      "metadata": {
        "metricType": "coverage",
        "overall": 67.5,
        "aiExtracted": true
      }
    },
    {
      "title": "Missing Error Handling in Network Requests",
      "severity": "high",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 123,
      "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 77
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Inefficient JSON Parsing in Response Handling",
      "severity": "medium",
      "category": "performance",
      "file": "source/core/Ky.ts",
      "line": 200,
      "codeSnippet": "\t\t\t\tif (type === 'json') {",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 110
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Inconsistent Use of TypeScript Types",
      "severity": "medium",
      "category": "code-quality",
      "file": "source/types/options.ts",
      "line": 15,
      "codeSnippet": "export interface Options extends KyOptions, Omit<RequestInit, 'headers'> { // eslint-disable-line @typescript-eslint/consistent-type-definitions -- This must stay an interface so that it can be extended outside of Ky for use in `ky.create`.",
      "location": {
        "file": "source/types/options.ts",
        "line": 246
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Potential Memory Leak in Event Handlers",
      "severity": "high",
      "category": "performance",
      "file": "test/hooks.ts",
      "line": 45,
      "codeSnippet": "hooks: { beforeRequest: [() => { /* do something */ }] },"
    },
    {
      "title": "Lack of Timeout Configuration for Requests",
      "severity": "high",
      "category": "code-quality",
      "file": "source/core/Ky.ts",
      "line": 75,
      "codeSnippet": "import {TimeoutError} from '../errors/TimeoutError.js';",
      "location": {
        "file": "source/core/Ky.ts",
        "line": 2
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Uncaught Promise Rejections in Async Tests",
      "severity": "medium",
      "category": "testing",
      "file": "test/retry.ts",
      "line": 30,
      "codeSnippet": "test('network error', async t => {",
      "location": {
        "file": "test/retry.ts",
        "line": 11
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Missing Assertions in Test Cases",
      "severity": "medium",
      "category": "testing",
      "file": "test/main.ts",
      "line": 100,
      "codeSnippet": "import test from 'ava';",
      "location": {
        "file": "test/main.ts",
        "line": 2
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Hardcoded URLs in Test Cases",
      "severity": "low",
      "category": "code-quality",
      "file": "test/browser.ts",
      "line": 12,
      "codeSnippet": "import test, {type ExecutionContext} from 'ava';",
      "location": {
        "file": "test/browser.ts",
        "line": 1
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Insufficient Test Coverage for Edge Cases",
      "severity": "high",
      "category": "testing",
      "file": "test/hooks.ts",
      "line": 60,
      "codeSnippet": "import test from 'ava';",
      "location": {
        "file": "test/hooks.ts",
        "line": 1
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    },
    {
      "title": "Tight Coupling Between Modules",
      "severity": "medium",
      "category": "architecture",
      "file": "source/core/Ky.ts",
      "line": 50,
      "codeSnippet": "const kyInstance = new Ky({ ... });"
    },
    {
      "title": "Outdated Dependencies in Package.json",
      "severity": "high",
      "category": "dependencies",
      "file": "package.json",
      "line": 5,
      "codeSnippet": "\t\"devDependencies\": {",
      "location": {
        "file": "package.json",
        "line": 56
      },
      "locationMethod": "file-search",
      "locationConfidence": 70
    }
  ],
  "categorized": {
    "newIssues": [
      {
        "issue": {
          "id": "security-1",
          "category": "security",
          "severity": "high",
          "type": "Hardcoded API Endpoint",
          "title": "Hardcoded API Endpoint vulnerability",
          "description": "Hardcoded endpoints can lead to security vulnerabilities, such as exposing sensitive data or allowing for potential attacks if the endpoint is compromised. This is critical in production environments.",
          "location": {
            "file": "source/api.js",
            "line": 15
          },
          "impact": "Exposing sensitive data or allowing for potential attacks if the endpoint is compromised",
          "remediation": "Use environment variables to store sensitive data like API endpoints",
          "codeSnippet": "const API_URL = 'https://api.example.com/data';",
          "fixedCode": "const API_URL = process.env.API_URL;",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/api.js|security|high|endpoints-hardcoded-lead-security-vulnerabilities",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-1",
          "category": "code-quality",
          "severity": "high",
          "type": "Missing Error Handling",
          "title": "Missing Error Handling",
          "description": "Missing error handling in fetch requests could lead to unhandled promise rejections and application crashes.",
          "location": {
            "file": "source/index.ts",
            "line": 53
          },
          "impact": "Critical functions without tests can lead to undetected bugs and regressions, impacting the reliability of the application. This can lead to increased maintenance costs and reduced user trust.",
          "recommendation": "Add unit tests for the processPayment function to ensure it works as expected.",
          "metadata": {
            "aiExtracted": true
          },
          "codeSnippet": "\tBeforeErrorHook,",
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/index.ts|code-quality|high|error-fetch-handle-handling-missing-requests",
        "confidence": 1
      },
      {
        "issue": {
          "id": "dep-outdated-1",
          "category": "dependencies",
          "severity": "low",
          "type": "outdated",
          "title": "Outdated: axios@0.21.1",
          "description": "1 versions behind",
          "message": "Update axios to 0.24.0",
          "recommendation": "Update to 0.24.0",
          "metadata": {
            "packageName": "axios",
            "currentVersion": "0.21.1",
            "latestVersion": "0.24.0",
            "versionsBehind": 1,
            "dependencyType": "outdated",
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "unknown|dependencies|low|axios-update",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-2",
          "category": "code-quality",
          "severity": "medium",
          "type": "Memory Leak",
          "title": "Memory Leak",
          "description": "Potential memory leak due to event listeners not being removed.",
          "location": {
            "file": "test/browser.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "test/browser.ts|code-quality|medium|event-leak-listeners-memory-potential",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-3",
          "category": "code-quality",
          "severity": "critical",
          "type": "Hardcoded API Endpoint",
          "title": "Hardcoded API Endpoint",
          "description": "Hardcoded API endpoint can lead to security vulnerabilities.",
          "location": {
            "file": "source/api.js",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/api.js|code-quality|critical|endpoint-hardcoded-lead-security-vulnerabilities",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-4",
          "category": "code-quality",
          "severity": "medium",
          "type": "Unused Dependency",
          "title": "Unused Dependency",
          "description": "Unused dependencies in package.json can lead to unnecessary bloat and potential vulnerabilities.",
          "location": {
            "file": "package.json",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "package.json|code-quality|medium|dependencies-lead-packagejson-unused",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-5",
          "category": "code-quality",
          "severity": "critical",
          "type": "Lack of Tests",
          "title": "Lack of Tests",
          "description": "Critical functions without tests can lead to undetected bugs and regressions.",
          "location": {
            "file": "source/functions.js",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "new",
        "matchKey": "source/functions.js|code-quality|critical|critical-functions-without",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Missing Error Handling in Network Requests",
          "severity": "high",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 123,
          "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 77
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|code-quality|high|error-handling-missing-network-requests",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Inconsistent Use of TypeScript Types",
          "severity": "medium",
          "category": "code-quality",
          "file": "source/types/options.ts",
          "line": 15,
          "codeSnippet": "export interface Options extends KyOptions, Omit<RequestInit, 'headers'> { // eslint-disable-line @typescript-eslint/consistent-type-definitions -- This must stay an interface so that it can be extended outside of Ky for use in `ky.create`.",
          "location": {
            "file": "source/types/options.ts",
            "line": 246
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/types/options.ts|code-quality|medium|inconsistent-type-types-typescript",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Potential Memory Leak in Event Handlers",
          "severity": "high",
          "category": "performance",
          "file": "test/hooks.ts",
          "line": 45,
          "codeSnippet": "hooks: { beforeRequest: [() => { /* do something */ }] },"
        },
        "category": "new",
        "matchKey": "test/hooks.ts|performance|high|event-handle-handlers-leak-memory-potential",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Lack of Timeout Configuration for Requests",
          "severity": "high",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 75,
          "codeSnippet": "import {TimeoutError} from '../errors/TimeoutError.js';",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 2
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|code-quality|high|configuration-lack-requests-timeout",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Uncaught Promise Rejections in Async Tests",
          "severity": "medium",
          "category": "testing",
          "file": "test/retry.ts",
          "line": 30,
          "codeSnippet": "test('network error', async t => {",
          "location": {
            "file": "test/retry.ts",
            "line": 11
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/retry.ts|testing|medium|async-promise-rejections-uncaught",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Missing Assertions in Test Cases",
          "severity": "medium",
          "category": "testing",
          "file": "test/main.ts",
          "line": 100,
          "codeSnippet": "import test from 'ava';",
          "location": {
            "file": "test/main.ts",
            "line": 2
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/main.ts|testing|medium|assertion-assertions-cases-missing-test",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Hardcoded URLs in Test Cases",
          "severity": "low",
          "category": "code-quality",
          "file": "test/browser.ts",
          "line": 12,
          "codeSnippet": "import test, {type ExecutionContext} from 'ava';",
          "location": {
            "file": "test/browser.ts",
            "line": 1
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/browser.ts|code-quality|low|cases-hardcoded-test-urls",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Insufficient Test Coverage for Edge Cases",
          "severity": "high",
          "category": "testing",
          "file": "test/hooks.ts",
          "line": 60,
          "codeSnippet": "import test from 'ava';",
          "location": {
            "file": "test/hooks.ts",
            "line": 1
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "test/hooks.ts|testing|high|coverage-insufficient-test",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Tight Coupling Between Modules",
          "severity": "medium",
          "category": "architecture",
          "file": "source/core/Ky.ts",
          "line": 50,
          "codeSnippet": "const kyInstance = new Ky({ ... });"
        },
        "category": "new",
        "matchKey": "source/core/ky.ts|architecture|medium|between-coupling-tight",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Outdated Dependencies in Package.json",
          "severity": "high",
          "category": "dependencies",
          "file": "package.json",
          "line": 5,
          "codeSnippet": "\t\"devDependencies\": {",
          "location": {
            "file": "package.json",
            "line": 56
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "new",
        "matchKey": "package.json|dependencies|high|dependencies-outdated-packagejson",
        "confidence": 1
      }
    ],
    "fixedIssues": [
      {
        "issue": {
          "id": "security-1",
          "category": "security",
          "severity": "high",
          "type": "XSS",
          "title": "XSS vulnerability",
          "description": "Improper handling of user input can lead to cross-site scripting (XSS) attacks, compromising user data and application integrity.",
          "location": {
            "file": "test/browser.ts",
            "line": 45
          },
          "impact": "Attackers could inject malicious scripts that execute in the context of the user's browser.",
          "remediation": "Sanitize all user input before rendering it in the response. Use libraries like DOMPurify to clean user input.",
          "codeSnippet": "response.writeHead(303, {Connection: 'close', Location: '/'});",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "test/browser.ts|security|high|handling-improper-user-xss",
        "confidence": 1
      },
      {
        "issue": {
          "id": "security-2",
          "category": "security",
          "severity": "critical",
          "type": "Hardcoded Secrets",
          "title": "Hardcoded Secrets vulnerability",
          "description": "Hardcoded secrets can be easily extracted from the source code, leading to unauthorized access and potential data breaches.",
          "location": {
            "file": "source/core/constants.ts",
            "line": 10
          },
          "impact": "This poses a significant risk to the application's security and compliance.",
          "remediation": "Remove hardcoded secrets and use environment variables or secret management tools to store sensitive information securely.",
          "codeSnippet": "export const secretKey = 'my-secret-key';",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/core/constants.ts|security|critical|easily-extracted-hardcoded-secrets",
        "confidence": 1
      },
      {
        "issue": {
          "id": "performance-7",
          "category": "performance",
          "severity": "high",
          "type": "Untested Critical Function",
          "title": "Untested Critical Function",
          "description": "Current: undefined, Expected: undefined",
          "location": {
            "file": "source/api/payment.ts",
            "line": 60,
            "lines": "45-89"
          },
          "recommendation": "Implement comprehensive tests for the 'processPayment' function to ensure its correctness and reliability.",
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/api/payment.ts|performance|high|current-expected-undefined",
        "confidence": 1
      },
      {
        "issue": {
          "id": "dep-outdated-1",
          "category": "dependencies",
          "severity": "low",
          "type": "outdated",
          "title": "Outdated: ava@^5.3.1",
          "description": "1 versions behind",
          "message": "Update ava to ^5.4.0",
          "recommendation": "Update to ^5.4.0",
          "metadata": {
            "packageName": "ava",
            "currentVersion": "^5.3.1",
            "latestVersion": "^5.4.0",
            "versionsBehind": 1,
            "dependencyType": "outdated",
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "unknown|dependencies|low|update",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-2",
          "category": "code-quality",
          "severity": "critical",
          "type": "Security Vulnerability",
          "title": "Security Vulnerability",
          "description": "Hardcoded secrets in code can be easily extracted, leading to unauthorized access.",
          "location": {
            "file": "source/core/constants.ts"
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "source/core/constants.ts|code-quality|critical|code-easily-hardcoded-secrets",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-3",
          "category": "code-quality",
          "severity": "medium",
          "type": "Outdated Dependency",
          "title": "Outdated Dependency",
          "description": "Using outdated dependencies exposes the application to vulnerabilities and performance issues.",
          "location": {
            "file": "package.json",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "package.json|code-quality|medium|dependencies-outdated-performance-using",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-4",
          "category": "code-quality",
          "severity": "high",
          "type": "Testing Issue",
          "title": "Testing Issue",
          "description": "Uncaught promise rejections in tests can lead to test failures that are hard to diagnose.",
          "location": {
            "file": "test/main.ts",
            "line": 0
          },
          "metadata": {
            "aiExtracted": true
          }
        },
        "category": "fixed",
        "matchKey": "test/main.ts|code-quality|high|promise-rejections-uncaught",
        "confidence": 1
      },
      {
        "issue": {
          "id": "quality-complexity-6",
          "category": "code-quality",
          "severity": "low",
          "type": "complexity",
          "title": "High complexity in undefined",
          "description": "Complexity: undefined",
          "location": {
            "file": "test/hooks.ts",
            "line": 286
          },
          "recommendation": "Refactor to reduce complexity",
          "metadata": {
            "metricType": "complexity",
            "aiExtracted": true
          },
          "codeSnippet": "\t\t\t\t\t\t\treturn undefined;",
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/hooks.ts|code-quality|low|complexity-undefined",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Improper Handling of HTTP Status Codes",
          "severity": "high",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 120,
          "codeSnippet": "import {HTTPError} from '../errors/HTTPError.js';",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 1
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "source/core/ky.ts|code-quality|high|handling-http-improper",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Lack of Error Handling in Retry Logic",
          "severity": "medium",
          "category": "code-quality",
          "file": "test/retry.ts",
          "line": 30,
          "codeSnippet": "test('network error', async t => {",
          "location": {
            "file": "test/retry.ts",
            "line": 11
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/retry.ts|code-quality|medium|error-handling-lack-retry",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Missing Type Checks for Response Data",
          "severity": "medium",
          "category": "code-quality",
          "file": "source/core/Ky.ts",
          "line": 210,
          "codeSnippet": "\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 77
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "source/core/ky.ts|code-quality|medium|checks-data-missing-response-type",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Inefficient Use of Promises in Tests",
          "severity": "low",
          "category": "testing",
          "file": "test/main.ts",
          "line": 45,
          "codeSnippet": "import {createHttpTestServer} from './helpers/create-http-test-server.js';",
          "location": {
            "file": "test/main.ts",
            "line": 6
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/main.ts|testing|low|inefficient-promises-tests",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Potential for Unhandled Promise Rejections",
          "severity": "high",
          "category": "code-quality",
          "file": "test/browser.ts",
          "line": 85,
          "codeSnippet": "\tconst results = await page.evaluate(async (url: string) => Promise.all([",
          "location": {
            "file": "test/browser.ts",
            "line": 67
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/browser.ts|code-quality|high|handle-potential-promise-unhandled",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Hardcoded Timeout Values in Tests",
          "severity": "medium",
          "category": "testing",
          "file": "test/retry.ts",
          "line": 60,
          "codeSnippet": "\t\t\tmessage: /Request Timeout/,",
          "location": {
            "file": "test/retry.ts",
            "line": 301
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/retry.ts|testing|medium|hardcoded-tests-timeout-values",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Missing Unit Tests for Edge Cases",
          "severity": "high",
          "category": "testing",
          "file": "test/main.ts",
          "line": 90,
          "codeSnippet": "import {createHttpTestServer} from './helpers/create-http-test-server.js';",
          "location": {
            "file": "test/main.ts",
            "line": 6
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/main.ts|testing|high|edge-missing-tests-unit",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Inconsistent Error Messages in Tests",
          "severity": "medium",
          "category": "testing",
          "file": "test/retry.ts",
          "line": 120,
          "codeSnippet": "test('network error', async t => {",
          "location": {
            "file": "test/retry.ts",
            "line": 11
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "test/retry.ts|testing|medium|error-inconsistent-messages-tests",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Redundant Dependencies in package.json",
          "severity": "low",
          "category": "dependencies",
          "file": "package.json",
          "line": 0,
          "codeSnippet": "\t\"devDependencies\": {",
          "location": {
            "file": "package.json",
            "line": 56
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "fixed",
        "matchKey": "package.json|dependencies|low|dependencies-packagejson-redundant",
        "confidence": 1
      }
    ],
    "unchangedIssues": [
      {
        "issue": {
          "id": "quality-coverage-6",
          "category": "code-quality",
          "severity": "medium",
          "type": "testing",
          "title": "Low test coverage: 67.5%",
          "description": "Increase test coverage to at least 80%",
          "metadata": {
            "metricType": "coverage",
            "overall": 67.5,
            "aiExtracted": true
          }
        },
        "category": "unchanged",
        "matchKey": "unknown|code-quality|medium|coverage-increase-test",
        "confidence": 1
      },
      {
        "issue": {
          "title": "Inefficient JSON Parsing in Response Handling",
          "severity": "medium",
          "category": "performance",
          "file": "source/core/Ky.ts",
          "line": 200,
          "codeSnippet": "\t\t\t\tif (type === 'json') {",
          "location": {
            "file": "source/core/Ky.ts",
            "line": 110
          },
          "locationMethod": "file-search",
          "locationConfidence": 70
        },
        "category": "unchanged",
        "matchKey": "source/core/ky.ts|performance|medium|inefficient-json-parsing",
        "confidence": 1
      }
    ],
    "summary": {
      "totalNew": 17,
      "totalFixed": 17,
      "totalUnchanged": 2,
      "netImpact": 0,
      "prQualityScore": 0
    },
    "recommendations": [
      "🚨 BLOCKING: Fix 2 critical issue(s) introduced by this PR",
      "⚠️ Address 7 high-severity issue(s) introduced by this PR",
      "🎉 Excellent! Fixed 2 critical and 6 high severity issues",
      "➖ Neutral impact: Fixed 17, introduced 17",
      "🔴 Significant issues detected. This PR needs work before merging."
    ]
  },
  "metadata": {
    "analysisDate": "2025-08-25T18:44:21.138Z",
    "mainBranchAnalysisDuration": 111.2,
    "prBranchAnalysisDuration": 89.1,
    "totalDuration": 200.3,
    "modelUsed": "dynamic-selection",
    "iterationsPerBranch": 3,
    "tokensUsed": 0
  }
}